name: Master CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests (NestJS + PostgreSQL)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.DATABASE_USER }}"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: backend
        run: npm install

      - name: Set DATABASE_URL for Production
        run: echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be Ready
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ secrets.DATABASE_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Prisma Migrations
        working-directory: backend
        run: npx prisma migrate deploy

      - name: Run Jest tests
        working-directory: backend
        run: npm run test

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: backend-tests  # Only deploy if tests pass

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: backend
        run: npm install

      - name: Connect to Server & Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << 'EOF'
            cd /path/to/your/project
            git pull origin master
            docker compose pull
            docker compose up -d
            docker exec backend_container_name npx prisma migrate deploy
          EOF
